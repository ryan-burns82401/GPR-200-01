/*
	Author: Ryan Burns
	Class: GPR-200-01
	Date: 10/17/20
	Last Modified: 10/28/20

	Credits: GLSL Starter Code by Daniel S. Buckstein
			 GLSL Starter Functions by Daniel S. Buckstein
			 (calcColor, mainImage)
*/

//  -> BUFFER A TAB (rotating cubemap background)

	// Part of Assignment: Textures/Cubemaps

//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return asPoint(sBasis(vp.viewportPoint.xy, -vp.viewportPoint.z));
    
    // inital viewport direction
    vec3 cubeLoc = ray.direction.xyz;
    
    // rotation matrix
    mat3 rotationY;
    
    // rotation speed
    float x = iTime * 0.1;
    
    // variables for 'sin' and 'cos' over time
    float c = cos(x);
    float s = sin(x);
    
    // rotation matrix implementation
    // (rotation around the y-axis)
    rotationY = mat3(+c, 0.0, +s, 0.0, 1.0, 0.0, -s, 0.0, +c);
    
    // changes the viewport direction
    // according to the rotation matrix
    cubeLoc = rotationY * cubeLoc;
    
    // return cubemap with rotation
    return texture(iChannel0, cubeLoc);
}

//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}