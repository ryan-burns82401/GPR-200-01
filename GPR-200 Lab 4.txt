/*
	Author: Ryan Burns
	Class: GPR-200-01
	Date: 9/24/20
    Last Modified: 9/30/20

	Credits: GLSL Starter Code by Daniel S. Buckstein
		 	 GLSL Starter Functions by Daniel S. Buckstein
			 (asPoint, asOffset, calcViewport, calcRay, calcColor, mainImage)
*/

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    offset: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

// sSphere: structure for a sphere object
//	  center: coordinates of the center of the sphere
//    radius: raduis of the sphere
struct sSphere
{
    vec4 center;
    float radius;
};
    
// initSphere: initializes a sphere object given the parameters listed above
void initSphere(out sSphere sphere, in vec3 center, in float radius)
{
    sphere.center = asPoint(center);
    sphere.radius = radius;
}

// sPointLight: structure for a point light
//	  center:    coordinates of the point light
//    color:     color of the point light
//    intensity: strength of the point light
struct sPointLight
{
    vec4 center;
    vec4 color;
    float intensity;
};

// initPointLight: initializes a point light given the parameters listed above
void initPointLight(out sPointLight light, in vec3 center, in vec4 color, in float intensity)
{
    light.center = asPoint(center);
    light.color = color;
    light.intensity = intensity;
}

float lengthSq(vec2 x)
{
    return dot(x, x);
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // SCENE
    
    // create objects
    sSphere sphere;
    sPointLight light_1;
    
    // initialize objects
    initSphere(sphere, vec3(0.0, 0.0, -4.0), 0.5);
    initPointLight(light_1, vec3(6.0, 6.0, 6.0), vec4(1.0, 0.4, 0.2, 1.0), 40.0);
    
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    
    float lSq = lengthSq(dp.xy);
    float rSq = sphere.radius * sphere.radius;
    
    if (lSq <= rSq)
    {
        dp.z = rSq - lSq;
        
        // surface of the sphere at the current point
        vec3 position = sphere.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
        
        // normal vector of the surface of the sphere
        vec3 normal = (position - sphere.center.xyz) / sphere.radius;
        
        // end result of Part 1
        //return vec4(normal * 0.5 + 0.5, 1.0);
        //-----------------------------------------------
        
        // LAMBERTIAN REFLECTANCE
        
        // displacement between the center of the light
        // and the surface of the sphere at the current point
        // NOT LENGTH
        vec3 light_vector = light_1.center.xyz - position;
        
        // distance between the center of the light
        // and the surface of the sphere at the current point
        // DISTANCE <=> LENGTH
        float d = length(light_vector);
        
        // normal of the light vector
        // DISPLACEMENT / DISTANCE (same as 'normal' above)
        vec3 L = light_vector / d;
        
        // intensity of the light (from struct)
        float intensity = light_1.intensity;
        
        // attenuated intensity
        float aI = 1.0 / (1.0 + (d / intensity) + ((d * d) / (intensity * intensity)));
        
        // diffuse coefficient
        float dC = max(0.0, dot(normal, L));
        
        // diffuse intensity
        float dI = dC * aI;
        
        // without attenuation
        //return vec4(dC, dC, dC, 1.0);
        
        // with attenuation
        //return vec4(dI, dI, dI, 1.0);
        //-----------------------------------------------
        
        // diffuse reflection color (color of the surface)
        // currently set to white
        vec4 dRC = vec4(1.0, 1.0, 1.0, 1.0);
        
        // light color (from struct)
        vec4 light_color = light_1.color;
        
        // final surface color
        vec4 C = dI * dRC * light_color;
        
        // end result of Part 3
        //return C;
        //-----------------------------------------------
        
        // PHONG REFLECTANCE
        
        // highlight exponent
        float a = 32.0;
        
        // displacement between the view position
        // and the surface of the sphere at the current point
        // NOT LENGTH
        vec3 view_vector = rayOrigin.xyz - position;
        
        // distance between the view position
        // and the surface of the sphere at the current point
        // DISTANCE <=> LENGTH
        float d2 = length(view_vector);
        
        // normal of the view vector
        // DISPLACEMENT / DISTANCE (same as 'normal' and 'L' above)
        vec3 V = view_vector / d2;
        
        // reflected light vector about the normal
        vec3 R = reflect(-L, normal);
        
        // specular coefficient (Phong)
        float sC = max(0.0, dot(V, R));
        
        // specular intensity (Phong)
        float sI = pow(sC, a);
        
        //return vec4(sI, sI, sI, 1.0);
        //-----------------------------------------------
        
        // global ambient intensity
        float gaI = 1.0;
        
        // global ambient color
        vec4 gaC = vec4(0.5, 0.3, 0.1, 1.0);
        
        // specular reflection color
        // currently set to white
        vec4 sRC = vec4(1.0, 1.0, 1.0, 1.0);
        
        // final surface color
        vec4 C2 = (gaI * gaC) + (((dI * dRC) + (sI * sRC)) * light_color);
        
        // end result of Part 4
        //return C2;
        //-----------------------------------------------
        
        // BLINN-PHONG REFLECTANCE
        
        // average of the light and view vectors
        vec3 halfway_vector = (light_vector + view_vector) * 0.5;
        
        // distance of the halfway vector
        float d3 = length(halfway_vector);
        
        // normal of the halfway vector
        vec3 H = halfway_vector / d3;
        
        // specular coefficient (Blinn-Phong)
        float sC2 = max(0.0, dot(normal, H));
        
        // specular intensity (Blinn-Phong)
        float sI2 = pow(sC2, (a * 4.0));
        
        // final surface color
        vec4 C3 = (gaI * gaC) + (((dI * dRC) + (sI2 * sRC)) * light_color);
        
        // end result of Part 5 (?)
        return C3;
        //-----------------------------------------------
    }
    
	// BACKGROUND
    
	const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
    
	return vec4(mix(warm, cool, rayDirection.y), 1.0);
    //return vec4(0.5);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin);
}