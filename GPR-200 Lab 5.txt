/*
	Author: Ryan Burns
	Class: GPR-200-01
	Date: 10/3/20
	Last Modified: 10/8/20

	Credits: GLSL Starter Code by Daniel S. Buckstein
			 GLSL Starter Functions by Daniel S. Buckstein
			 (asPoint, asVector, lengthSq, initViewport, initRayPersp,
			  initRayOrtho, calcColor, mainImage)

	The following link was used as a reference for the Barrel Distortion in Part 2:
	https://www.geeks3d.com/20140213/glsl-shader-library-fish-eye-and-dome-and-barrel-distortion-post-processing-filters/2/
*/

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

// sPointLight: structure for a point light
//	  center:    coordinates of the point light
//    color:     color of the point light
//    intensity: strength of the point light
struct sPointLight
{
    vec4 center;
    vec4 color;
    float intensity;
};

// initPointLight: initializes a point light given the parameters listed above
void initPointLight(out sPointLight light, in vec3 center, in vec4 color, in float intensity)
{
    light.center = asPoint(center);
    light.color = color;
    light.intensity = intensity;
}

//------------------------------------------------------------
// RENDERING FUNCTIONS

// (outside source used for reference, cited in the credits)
// distortion: function used to distort the image in Part 2
//	  point: 2D point that is distorted
sCoord distortion(in sCoord point)
{
    float theta = atan(point.y, point.x);
    float radius = length(point);
    
    // speed of the effect
    float barrel = 0.25;
    // time-based aspect of the effect
    radius = pow(radius, (barrel * iTime));
    
    point.x = radius * cos(theta);
    point.y = radius * sin(theta);
      
    // returns distorted point
    return 0.5 * (point + 1.0);
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return vp.viewportPoint;
    
    // texture (full-screen)
    
    // relative to display
    sCoord loc = vp.uv;
    
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    
    // relative to texture
    //sCoord loc = px / res;
    
    // zoom + shift
    //loc = ratio * loc + (0.0 * iTime);
    
    //return texture(iChannel0, loc);
    
    //--------
    // Part 1
    
    // convert 'sampler2D' to 'vec4'
    vec4 texture_0 = texture(iChannel0, loc);
    vec4 texture_1 = texture(iChannel1, loc);
    
    // a value that increases over time
    // (takes 10 seconds to reach 1.0)
    float blend = 0.1 * iTime;
    
    // mixes the textures as the above value increases
    // (0.0 = texture_0, 1.0 = texture_1)
    vec4 crossFade = mix(texture_0, texture_1, blend);
    
    // fade effect is not finished, continues process
    /*
    if (blend <= 1.0)
    {
    	return crossFade;
    }
    // texture_1 is fully visible, stops fade
    // effect to avoid unintended results
    else
    {
        return texture(iChannel1, loc);
    }
    */

    //--------
    // Part 2
    
    // original coordinate
    sCoord originalPoint = 2.0 * loc.xy - 1.0;
    // distorted coordinate (uv)
    sCoord distortedPoint;
    
    float d2 = length(originalPoint);
    
    // part of the effect (distorts point)
    if (d2 < 1.0)
    {
    	distortedPoint = distortion(originalPoint);
    }
    // NOT part of the effect (does NOT distort point)
    else
    {
    	distortedPoint = loc.xy;
    }
    
    // return the texture with the distortion effect
    // (Barrel Distortion)
    //return texture(iChannel0, distortedPoint);
    
    //--------
    // Part 3
    
    // create point light
    sPointLight light_1;
    
    // used for animating the light
    // (starts at -5.0 and increases over time)
    float animate = -5.0 + (1.0 * iTime);
    
    // initialize point light
    // (the x coordinate changes as 'animate' changes)
    initPointLight(light_1, vec3(animate, 1.0, 0.5), vec4(1.0, 1.0, 1.0, 1.0), 10.0);
    
    // surface of the texture at the current point
    vec3 position = vec3(vp.uv, 0.0);
    
    // normal vector of the surface of the texture
    vec3 normal = vec3(0.0, 0.0, 1.0);
    
    // displacement between the center of the light
    // and the surface of the texture at the current point
    vec3 light_pos = light_1.center.xyz - position;
    
    // distance between the center of the light
    // and the surface of the texture
    float d3 = length(light_pos);
    
    // normal of the light vector
    vec3 L = light_pos / d3;
    
    // intensity of the light (from struct)
    float intensity = light_1.intensity;
    
    // attenuated intensity
    float aI = 1.0 / (1.0 + (d3 / intensity) + ((d3 * d3) / (intensity * intensity)));
    
    // diffuse coefficient
    float dC = max(0.0, dot(normal, L));
    
    // diffuse intensity
    float dI = dC * aI;
    
    // diffuse reflection color (color of the surface)
    // (currently set to the texture in Channel 0)
    vec4 dRC = texture_0;
    
    // light color (from struct)
    // (currently set to white)
    vec4 light_color = light_1.color;
    
    // final surface color
    vec4 C = dI * dRC * light_color;
    
    //return C;
    
    //--------
    // Part 4
    // (Unfinished)
    
    vec3 cubeLoc = ray.direction.xyz;
    vec3 rotation = vec3(cos(iTime), 1.0, -sin(iTime));
    
    cubeLoc = rotation * cubeLoc;
    
    //return texture(iChannel2, cubeLoc);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}