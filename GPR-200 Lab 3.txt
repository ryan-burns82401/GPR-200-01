/*
	Author: Ryan Burns
	Class: GPR-200-01
	Date: 9/23/20

	Credits: Dan Buckstein (starter functions)
	- calcViewport, calcRay, calcColor and mainImage
*/

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

// sphere: a struct for a sphere object (not currently used)
// 	  center: corrdinates for the center of the sphere
//	  radius: radius of the sphere
struct sphere
{
    vec4 center;
    float radius;
};

// hit_sphere: tests if a ray hits the sphere
//    center        corrdinates for the center of the sphere
//    radius:       radius of the sphere
//    rayDirection: input direction of ray from origin
//    rayOrigin:    input origin point of ray
float hit_sphere(vec4 center, float radius, in vec4 rayDirection, in vec4 rayOrigin)
{
    vec4 oc = rayOrigin - center;
    
    float a = length(rayDirection) * length(rayDirection);
    float half_b = dot(oc, rayDirection);
    float c = (length(oc) * length(oc)) - (radius * radius);
    float discriminant = half_b * half_b - a * c;
    
    // discriminant less than 0 will return -1
    if (discriminant < 0.0) 
    {
        return -1.0;
    }
    // discriminant greater than 0 returns the following equation's result
    else 
    {
        return (-half_b - sqrt(discriminant)) / a;
    }
}

// evaluate: determines which point on the sphere was hit
//    rayDirection: input direction of ray from origin
//    rayOrigin:    input origin point of ray
vec4 evaluate(in vec4 rayDirection, in vec4 rayOrigin, in float t)
{
    return rayOrigin + t * rayDirection;
}
          
// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    float t = hit_sphere(vec4(0.0, 0.0, -1.0, 1.0), 0.5, rayDirection, rayOrigin);
    
    if (t > 0.0)
    {
        // sphere was hit, calculates color accordingly
        vec4 N = normalize(evaluate(rayDirection, rayOrigin, t) - vec4(0.0, 0.0, -1.0, 1.0));
        return 0.5 * vec4(N.x + 1.0, N.y + 1.0, N.z + 1.0, 1.0);
    }
    
    // sphere was not hit, colors the background
    vec4 unit_direction = normalize(rayDirection);
    t = 0.5 * (unit_direction.y + 1.0);
    return (1.0 - t) * vec4(1.0, 1.0, 1.0, 1.0) + t * vec4(0.5, 0.7, 1.0, 1.0);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);

    // color
    fragColor = calcColor(rayDirection, rayOrigin);
}